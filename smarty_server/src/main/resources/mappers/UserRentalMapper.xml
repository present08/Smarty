<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.smarty.mapper.UserRentalMapper">
    <!--sql 구문을 써서 db에서 불러온다-->
<!--    대여 등록-->
    <insert id="insertRental" parameterType="com.green.smarty.vo.RentalVO">
        <!-- 오늘 날짜의 마지막 rental_id 조회 -->
        INSERT INTO rental (
            rental_id,
            user_id,
            product_id,
            rental_status,
            rental_date,
            count
        ) VALUES (
            #{rental_id},
            #{user_id},
            #{product_id},
            #{rental_status},
            #{rental_date},
            #{count}
        )
    </insert>

    <select id="getUserRentalListData" parameterType="String" resultType="com.green.smarty.dto.ProductRentalUserDTO">
        SELECT
            u.user_id,
            u.user_name,
            f.facility_name,
            p.product_id,
            p.product_name,
            p.price,
            p.size,
            r.rental_date,
            r.return_date,
            r.rental_status,
            r.rental_id,
            r.count
        FROM
            rental r
        INNER JOIN
            user u
        ON
            u.user_id = r.user_id
        INNER JOIN
            product p
        ON
            p.product_id = r.product_id
        INNER JOIN
            facility f
        ON
            f.facility_id = p.facility_id
        WHERE
            u.user_id = #{user_id}
    </select>

    <!--    상품 재고 감소-->
    <update id="productStockDown" parameterType="map">
        UPDATE
            product
        SET
            stock = stock - #{count}
        WHERE
            product_id = #{product_id}
    </update>

    <!--    상품 재고 증가-->
    <update id="productStockUp" parameterType="map">
        UPDATE
            product
        SET
            stock = stock + #{count}
        WHERE
            product_id = #{product_id}
    </update>

    <select id="getAllRentals" resultType="com.green.smarty.dto.RentalDTO">
        SELECT
            rental_id,
            user_id,
            product_id,
            rental_status,
            rental_date,
            return_date
        FROM
            rental
    </select>

    <select id="getRentalById" parameterType="String" resultType="com.green.smarty.dto.RentalDTO">
        SELECT
            rental_id,
            user_id,
            product_id,
            rental_status,
            rental_date,
            return_date,
            count
        FROM
            rental
        WHERE
            rental_id = #{rental_id}
    </select>

    <!-- 반납 처리 -->
    <update id="returnRental" parameterType="com.green.smarty.vo.RentalVO">
        UPDATE rental
        SET rental_status = #{rental_status},
            return_date = #{return_date}
        WHERE rental_id = #{rental_id}
    </update>

    <resultMap id="RentalVOMap" type="com.green.smarty.vo.RentalVO">
        <result property="rental_id" column="rental_id" jdbcType="VARCHAR"/>
    </resultMap>

    <update id="updatePaymentStatus" parameterType="com.green.smarty.dto.PaymentDTO">
        UPDATE payment
        SET payment_status = #{payment_status}
        WHERE payment_id = (SELECT payment_id FROM rental WHERE rental_id = #{rental_id})
    </update>

    <select id="getMaxRentalIdForDate" parameterType="string" resultType="string">
        SELECT MAX(rental_id)
        FROM rental
        WHERE rental_id LIKE CONCAT('R_', #{datePrefix}, '%')
    </select>

<!--    (영준) 알림을 위해서 추가한 코드-->
    <select id="getOverdueRentals" resultType="com.green.smarty.dto.RentalDTO">
        SELECT * FROM rental
        WHERE rental_date &lt; NOW() - INTERVAL 10 DAY
        AND rental_status = 1;
    </select>

<!--    (영준) user_id가 아니라 이메일을 가져오기 위한 코드-->
    <select id="getEmailByUserId" resultType="String" parameterType="String">
        SELECT email
        FROM user
        WHERE user_id = #{user_id}
    </select>
</mapper>